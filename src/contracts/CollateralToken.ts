/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export type OfferItemStruct = {
  itemType: PromiseOrValue<BigNumberish>
  token: PromiseOrValue<string>
  identifierOrCriteria: PromiseOrValue<BigNumberish>
  startAmount: PromiseOrValue<BigNumberish>
  endAmount: PromiseOrValue<BigNumberish>
}

export type OfferItemStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  itemType: number
  token: string
  identifierOrCriteria: BigNumber
  startAmount: BigNumber
  endAmount: BigNumber
}

export type ConsiderationItemStruct = {
  itemType: PromiseOrValue<BigNumberish>
  token: PromiseOrValue<string>
  identifierOrCriteria: PromiseOrValue<BigNumberish>
  startAmount: PromiseOrValue<BigNumberish>
  endAmount: PromiseOrValue<BigNumberish>
  recipient: PromiseOrValue<string>
}

export type ConsiderationItemStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  itemType: number
  token: string
  identifierOrCriteria: BigNumber
  startAmount: BigNumber
  endAmount: BigNumber
  recipient: string
}

export type OrderParametersStruct = {
  offerer: PromiseOrValue<string>
  zone: PromiseOrValue<string>
  offer: OfferItemStruct[]
  consideration: ConsiderationItemStruct[]
  orderType: PromiseOrValue<BigNumberish>
  startTime: PromiseOrValue<BigNumberish>
  endTime: PromiseOrValue<BigNumberish>
  zoneHash: PromiseOrValue<BytesLike>
  salt: PromiseOrValue<BigNumberish>
  conduitKey: PromiseOrValue<BytesLike>
  totalOriginalConsiderationItems: PromiseOrValue<BigNumberish>
}

export type OrderParametersStructOutput = [
  string,
  string,
  OfferItemStructOutput[],
  ConsiderationItemStructOutput[],
  number,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  BigNumber
] & {
  offerer: string
  zone: string
  offer: OfferItemStructOutput[]
  consideration: ConsiderationItemStructOutput[]
  orderType: number
  startTime: BigNumber
  endTime: BigNumber
  zoneHash: string
  salt: BigNumber
  conduitKey: string
  totalOriginalConsiderationItems: BigNumber
}

export type OrderStruct = {
  parameters: OrderParametersStruct
  signature: PromiseOrValue<BytesLike>
}

export type OrderStructOutput = [OrderParametersStructOutput, string] & {
  parameters: OrderParametersStructOutput
  signature: string
}

export type AdvancedOrderStruct = {
  parameters: OrderParametersStruct
  numerator: PromiseOrValue<BigNumberish>
  denominator: PromiseOrValue<BigNumberish>
  signature: PromiseOrValue<BytesLike>
  extraData: PromiseOrValue<BytesLike>
}

export type AdvancedOrderStructOutput = [
  OrderParametersStructOutput,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  parameters: OrderParametersStructOutput
  numerator: BigNumber
  denominator: BigNumber
  signature: string
  extraData: string
}

export type CriteriaResolverStruct = {
  orderIndex: PromiseOrValue<BigNumberish>
  side: PromiseOrValue<BigNumberish>
  index: PromiseOrValue<BigNumberish>
  identifier: PromiseOrValue<BigNumberish>
  criteriaProof: PromiseOrValue<BytesLike>[]
}

export type CriteriaResolverStructOutput = [
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  string[]
] & {
  orderIndex: BigNumber
  side: number
  index: BigNumber
  identifier: BigNumber
  criteriaProof: string[]
}

export declare namespace ICollateralToken {
  export type AuctionVaultParamsStruct = {
    settlementToken: PromiseOrValue<string>
    collateralId: PromiseOrValue<BigNumberish>
    maxDuration: PromiseOrValue<BigNumberish>
    startingPrice: PromiseOrValue<BigNumberish>
    endingPrice: PromiseOrValue<BigNumberish>
  }

  export type AuctionVaultParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    settlementToken: string
    collateralId: BigNumber
    maxDuration: BigNumber
    startingPrice: BigNumber
    endingPrice: BigNumber
  }

  export type FileStruct = {
    what: PromiseOrValue<BigNumberish>
    data: PromiseOrValue<BytesLike>
  }

  export type FileStructOutput = [number, string] & {
    what: number
    data: string
  }

  export type ListUnderlyingForSaleParamsStruct = {
    stack: ILienToken.StackStruct[]
    listPrice: PromiseOrValue<BigNumberish>
    maxDuration: PromiseOrValue<BigNumberish>
  }

  export type ListUnderlyingForSaleParamsStructOutput = [
    ILienToken.StackStructOutput[],
    BigNumber,
    BigNumber
  ] & {
    stack: ILienToken.StackStructOutput[]
    listPrice: BigNumber
    maxDuration: BigNumber
  }
}

export declare namespace ILienToken {
  export type DetailsStruct = {
    maxAmount: PromiseOrValue<BigNumberish>
    rate: PromiseOrValue<BigNumberish>
    duration: PromiseOrValue<BigNumberish>
    maxPotentialDebt: PromiseOrValue<BigNumberish>
    liquidationInitialAsk: PromiseOrValue<BigNumberish>
  }

  export type DetailsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maxAmount: BigNumber
    rate: BigNumber
    duration: BigNumber
    maxPotentialDebt: BigNumber
    liquidationInitialAsk: BigNumber
  }

  export type LienStruct = {
    token: PromiseOrValue<string>
    vault: PromiseOrValue<string>
    strategyRoot: PromiseOrValue<BytesLike>
    collateralId: PromiseOrValue<BigNumberish>
    details: ILienToken.DetailsStruct
  }

  export type LienStructOutput = [
    string,
    string,
    string,
    BigNumber,
    ILienToken.DetailsStructOutput
  ] & {
    token: string
    vault: string
    strategyRoot: string
    collateralId: BigNumber
    details: ILienToken.DetailsStructOutput
  }

  export type PointStruct = {
    amount: PromiseOrValue<BigNumberish>
    position: PromiseOrValue<BigNumberish>
    last: PromiseOrValue<BigNumberish>
    end: PromiseOrValue<BigNumberish>
    lienId: PromiseOrValue<BigNumberish>
  }

  export type PointStructOutput = [
    BigNumber,
    number,
    number,
    number,
    BigNumber
  ] & {
    amount: BigNumber
    position: number
    last: number
    end: number
    lienId: BigNumber
  }

  export type StackStruct = {
    lien: ILienToken.LienStruct
    point: ILienToken.PointStruct
  }

  export type StackStructOutput = [
    ILienToken.LienStructOutput,
    ILienToken.PointStructOutput
  ] & {
    lien: ILienToken.LienStructOutput
    point: ILienToken.PointStructOutput
  }
}

export interface CollateralTokenInterface extends utils.Interface {
  functions: {
    'SEAPORT()': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'auctionVault((address,uint256,uint256,uint256,uint256))': FunctionFragment
    'authority()': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'file((uint8,bytes))': FunctionFragment
    'fileBatch((uint8,bytes)[])': FunctionFragment
    'flashAction(address,uint256,bytes)': FunctionFragment
    'getApproved(uint256)': FunctionFragment
    'getClearingHouse(uint256)': FunctionFragment
    'getConduit()': FunctionFragment
    'getConduitKey()': FunctionFragment
    'getOpenSeaData()': FunctionFragment
    'getUnderlying(uint256)': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'isValidOrder(bytes32,address,address,bytes32)': FunctionFragment
    'isValidOrderIncludingExtraData(bytes32,address,((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes),bytes32[],(uint256,uint8,uint256,uint256,bytes32[])[])': FunctionFragment
    'liquidatorNFTClaim((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256))': FunctionFragment
    'listForSaleOnSeaport((((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256,uint56))': FunctionFragment
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment
    'owner()': FunctionFragment
    'ownerOf(uint256)': FunctionFragment
    'releaseToAddress(uint256,address)': FunctionFragment
    'safeTransferFrom(address,address,uint256)': FunctionFragment
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment
    'securityHooks(address)': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'setAuthority(address)': FunctionFragment
    'settleAuction(uint256)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'tokenURI(uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'SEAPORT'
      | 'approve'
      | 'auctionVault'
      | 'authority'
      | 'balanceOf'
      | 'file'
      | 'fileBatch'
      | 'flashAction'
      | 'getApproved'
      | 'getClearingHouse'
      | 'getConduit'
      | 'getConduitKey'
      | 'getOpenSeaData'
      | 'getUnderlying'
      | 'isApprovedForAll'
      | 'isValidOrder'
      | 'isValidOrderIncludingExtraData'
      | 'liquidatorNFTClaim'
      | 'listForSaleOnSeaport'
      | 'onERC721Received'
      | 'owner'
      | 'ownerOf'
      | 'releaseToAddress'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'securityHooks'
      | 'setApprovalForAll'
      | 'setAuthority'
      | 'settleAuction'
      | 'supportsInterface'
      | 'tokenURI'
      | 'transferFrom'
      | 'transferOwnership'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'SEAPORT', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'auctionVault',
    values: [ICollateralToken.AuctionVaultParamsStruct]
  ): string
  encodeFunctionData(functionFragment: 'authority', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'file',
    values: [ICollateralToken.FileStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'fileBatch',
    values: [ICollateralToken.FileStruct[]]
  ): string
  encodeFunctionData(
    functionFragment: 'flashAction',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getApproved',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getClearingHouse',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'getConduit', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getConduitKey',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getOpenSeaData',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getUnderlying',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'isValidOrder',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'isValidOrderIncludingExtraData',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      AdvancedOrderStruct,
      PromiseOrValue<BytesLike>[],
      CriteriaResolverStruct[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'liquidatorNFTClaim',
    values: [OrderParametersStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'listForSaleOnSeaport',
    values: [ICollateralToken.ListUnderlyingForSaleParamsStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'releaseToAddress',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'securityHooks',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(
    functionFragment: 'setAuthority',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'settleAuction',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'tokenURI',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string

  decodeFunctionResult(functionFragment: 'SEAPORT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'auctionVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'authority', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'file', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'fileBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'flashAction', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getClearingHouse',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getConduit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getConduitKey',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getOpenSeaData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUnderlying',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isValidOrder',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isValidOrderIncludingExtraData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'liquidatorNFTClaim',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'listForSaleOnSeaport',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'onERC721Received',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'releaseToAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'securityHooks',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setAuthority',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'settleAuction',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'ApprovalForAll(address,address,bool)': EventFragment
    'AuthorityUpdated(address,address)': EventFragment
    'Deposit721(address,uint256,uint256,address)': EventFragment
    'FileUpdated(uint8,bytes)': EventFragment
    'ListedOnSeaport(uint256,tuple)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'ReleaseTo(address,uint256,address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AuthorityUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Deposit721'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FileUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ListedOnSeaport'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ReleaseTo'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export interface ApprovalEventObject {
  owner: string
  spender: string
  id: BigNumber
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface ApprovalForAllEventObject {
  owner: string
  operator: string
  approved: boolean
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export interface AuthorityUpdatedEventObject {
  user: string
  newAuthority: string
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string, string],
  AuthorityUpdatedEventObject
>

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>

export interface Deposit721EventObject {
  tokenContract: string
  tokenId: BigNumber
  collateralId: BigNumber
  depositedFor: string
}
export type Deposit721Event = TypedEvent<
  [string, BigNumber, BigNumber, string],
  Deposit721EventObject
>

export type Deposit721EventFilter = TypedEventFilter<Deposit721Event>

export interface FileUpdatedEventObject {
  what: number
  data: string
}
export type FileUpdatedEvent = TypedEvent<
  [number, string],
  FileUpdatedEventObject
>

export type FileUpdatedEventFilter = TypedEventFilter<FileUpdatedEvent>

export interface ListedOnSeaportEventObject {
  collateralId: BigNumber
  listingOrder: OrderStructOutput
}
export type ListedOnSeaportEvent = TypedEvent<
  [BigNumber, OrderStructOutput],
  ListedOnSeaportEventObject
>

export type ListedOnSeaportEventFilter = TypedEventFilter<ListedOnSeaportEvent>

export interface OwnershipTransferredEventObject {
  user: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface ReleaseToEventObject {
  underlyingAsset: string
  assetId: BigNumber
  to: string
}
export type ReleaseToEvent = TypedEvent<
  [string, BigNumber, string],
  ReleaseToEventObject
>

export type ReleaseToEventFilter = TypedEventFilter<ReleaseToEvent>

export interface TransferEventObject {
  from: string
  to: string
  id: BigNumber
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface CollateralToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: CollateralTokenInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    SEAPORT(overrides?: CallOverrides): Promise<[string]>

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    auctionVault(
      params: ICollateralToken.AuctionVaultParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    authority(overrides?: CallOverrides): Promise<[string]>

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    file(
      incoming: ICollateralToken.FileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    fileBatch(
      files: ICollateralToken.FileStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    flashAction(
      receiver: PromiseOrValue<string>,
      collateralId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    getClearingHouse(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    getConduit(overrides?: CallOverrides): Promise<[string]>

    getConduitKey(overrides?: CallOverrides): Promise<[string]>

    getOpenSeaData(overrides?: CallOverrides): Promise<[string, number, number]>

    getUnderlying(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isValidOrder(
      orderHash: PromiseOrValue<BytesLike>,
      caller: PromiseOrValue<string>,
      offerer: PromiseOrValue<string>,
      zoneHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { validOrderMagicValue: string }>

    isValidOrderIncludingExtraData(
      orderHash: PromiseOrValue<BytesLike>,
      caller: PromiseOrValue<string>,
      order: AdvancedOrderStruct,
      priorOrderHashes: PromiseOrValue<BytesLike>[],
      criteriaResolvers: CriteriaResolverStruct[],
      overrides?: CallOverrides
    ): Promise<[string] & { validOrderMagicValue: string }>

    liquidatorNFTClaim(
      params: OrderParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    listForSaleOnSeaport(
      params: ICollateralToken.ListUnderlyingForSaleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    onERC721Received(
      operator_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>

    releaseToAddress(
      collateralId: PromiseOrValue<BigNumberish>,
      releaseTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    securityHooks(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    settleAuction(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    tokenURI(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  SEAPORT(overrides?: CallOverrides): Promise<string>

  approve(
    spender: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  auctionVault(
    params: ICollateralToken.AuctionVaultParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  authority(overrides?: CallOverrides): Promise<string>

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  file(
    incoming: ICollateralToken.FileStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  fileBatch(
    files: ICollateralToken.FileStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  flashAction(
    receiver: PromiseOrValue<string>,
    collateralId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  getClearingHouse(
    collateralId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  getConduit(overrides?: CallOverrides): Promise<string>

  getConduitKey(overrides?: CallOverrides): Promise<string>

  getOpenSeaData(overrides?: CallOverrides): Promise<[string, number, number]>

  getUnderlying(
    collateralId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  isValidOrder(
    orderHash: PromiseOrValue<BytesLike>,
    caller: PromiseOrValue<string>,
    offerer: PromiseOrValue<string>,
    zoneHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>

  isValidOrderIncludingExtraData(
    orderHash: PromiseOrValue<BytesLike>,
    caller: PromiseOrValue<string>,
    order: AdvancedOrderStruct,
    priorOrderHashes: PromiseOrValue<BytesLike>[],
    criteriaResolvers: CriteriaResolverStruct[],
    overrides?: CallOverrides
  ): Promise<string>

  liquidatorNFTClaim(
    params: OrderParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  listForSaleOnSeaport(
    params: ICollateralToken.ListUnderlyingForSaleParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  onERC721Received(
    operator_: PromiseOrValue<string>,
    from_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  ownerOf(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  releaseToAddress(
    collateralId: PromiseOrValue<BigNumberish>,
    releaseTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  securityHooks(
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setAuthority(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  settleAuction(
    collateralId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  tokenURI(
    collateralId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    SEAPORT(overrides?: CallOverrides): Promise<string>

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    auctionVault(
      params: ICollateralToken.AuctionVaultParamsStruct,
      overrides?: CallOverrides
    ): Promise<OrderParametersStructOutput>

    authority(overrides?: CallOverrides): Promise<string>

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    file(
      incoming: ICollateralToken.FileStruct,
      overrides?: CallOverrides
    ): Promise<void>

    fileBatch(
      files: ICollateralToken.FileStruct[],
      overrides?: CallOverrides
    ): Promise<void>

    flashAction(
      receiver: PromiseOrValue<string>,
      collateralId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    getClearingHouse(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    getConduit(overrides?: CallOverrides): Promise<string>

    getConduitKey(overrides?: CallOverrides): Promise<string>

    getOpenSeaData(overrides?: CallOverrides): Promise<[string, number, number]>

    getUnderlying(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    isValidOrder(
      orderHash: PromiseOrValue<BytesLike>,
      caller: PromiseOrValue<string>,
      offerer: PromiseOrValue<string>,
      zoneHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    isValidOrderIncludingExtraData(
      orderHash: PromiseOrValue<BytesLike>,
      caller: PromiseOrValue<string>,
      order: AdvancedOrderStruct,
      priorOrderHashes: PromiseOrValue<BytesLike>[],
      criteriaResolvers: CriteriaResolverStruct[],
      overrides?: CallOverrides
    ): Promise<string>

    liquidatorNFTClaim(
      params: OrderParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>

    listForSaleOnSeaport(
      params: ICollateralToken.ListUnderlyingForSaleParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>

    onERC721Received(
      operator_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    releaseToAddress(
      collateralId: PromiseOrValue<BigNumberish>,
      releaseTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    securityHooks(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    settleAuction(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    tokenURI(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter

    'ApprovalForAll(address,address,bool)'(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter

    'AuthorityUpdated(address,address)'(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null
    ): AuthorityUpdatedEventFilter
    AuthorityUpdated(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null
    ): AuthorityUpdatedEventFilter

    'Deposit721(address,uint256,uint256,address)'(
      tokenContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      collateralId?: PromiseOrValue<BigNumberish> | null,
      depositedFor?: null
    ): Deposit721EventFilter
    Deposit721(
      tokenContract?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      collateralId?: PromiseOrValue<BigNumberish> | null,
      depositedFor?: null
    ): Deposit721EventFilter

    'FileUpdated(uint8,bytes)'(what?: null, data?: null): FileUpdatedEventFilter
    FileUpdated(what?: null, data?: null): FileUpdatedEventFilter

    'ListedOnSeaport(uint256,tuple)'(
      collateralId?: null,
      listingOrder?: null
    ): ListedOnSeaportEventFilter
    ListedOnSeaport(
      collateralId?: null,
      listingOrder?: null
    ): ListedOnSeaportEventFilter

    'OwnershipTransferred(address,address)'(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'ReleaseTo(address,uint256,address)'(
      underlyingAsset?: PromiseOrValue<string> | null,
      assetId?: null,
      to?: PromiseOrValue<string> | null
    ): ReleaseToEventFilter
    ReleaseTo(
      underlyingAsset?: PromiseOrValue<string> | null,
      assetId?: null,
      to?: PromiseOrValue<string> | null
    ): ReleaseToEventFilter

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter
  }

  estimateGas: {
    SEAPORT(overrides?: CallOverrides): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    auctionVault(
      params: ICollateralToken.AuctionVaultParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    authority(overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    file(
      incoming: ICollateralToken.FileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    fileBatch(
      files: ICollateralToken.FileStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    flashAction(
      receiver: PromiseOrValue<string>,
      collateralId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getClearingHouse(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getConduit(overrides?: CallOverrides): Promise<BigNumber>

    getConduitKey(overrides?: CallOverrides): Promise<BigNumber>

    getOpenSeaData(overrides?: CallOverrides): Promise<BigNumber>

    getUnderlying(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isValidOrder(
      orderHash: PromiseOrValue<BytesLike>,
      caller: PromiseOrValue<string>,
      offerer: PromiseOrValue<string>,
      zoneHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isValidOrderIncludingExtraData(
      orderHash: PromiseOrValue<BytesLike>,
      caller: PromiseOrValue<string>,
      order: AdvancedOrderStruct,
      priorOrderHashes: PromiseOrValue<BytesLike>[],
      criteriaResolvers: CriteriaResolverStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    liquidatorNFTClaim(
      params: OrderParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    listForSaleOnSeaport(
      params: ICollateralToken.ListUnderlyingForSaleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    onERC721Received(
      operator_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    releaseToAddress(
      collateralId: PromiseOrValue<BigNumberish>,
      releaseTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    securityHooks(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    settleAuction(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tokenURI(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    SEAPORT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    auctionVault(
      params: ICollateralToken.AuctionVaultParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    file(
      incoming: ICollateralToken.FileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    fileBatch(
      files: ICollateralToken.FileStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    flashAction(
      receiver: PromiseOrValue<string>,
      collateralId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getClearingHouse(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getConduit(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getConduitKey(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getOpenSeaData(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getUnderlying(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isValidOrder(
      orderHash: PromiseOrValue<BytesLike>,
      caller: PromiseOrValue<string>,
      offerer: PromiseOrValue<string>,
      zoneHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isValidOrderIncludingExtraData(
      orderHash: PromiseOrValue<BytesLike>,
      caller: PromiseOrValue<string>,
      order: AdvancedOrderStruct,
      priorOrderHashes: PromiseOrValue<BytesLike>[],
      criteriaResolvers: CriteriaResolverStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    liquidatorNFTClaim(
      params: OrderParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    listForSaleOnSeaport(
      params: ICollateralToken.ListUnderlyingForSaleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    onERC721Received(
      operator_: PromiseOrValue<string>,
      from_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    releaseToAddress(
      collateralId: PromiseOrValue<BigNumberish>,
      releaseTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    securityHooks(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    settleAuction(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    tokenURI(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
