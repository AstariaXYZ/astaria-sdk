/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export declare namespace ILienToken {
  export type DetailsStruct = {
    maxAmount: PromiseOrValue<BigNumberish>
    rate: PromiseOrValue<BigNumberish>
    duration: PromiseOrValue<BigNumberish>
    maxPotentialDebt: PromiseOrValue<BigNumberish>
    liquidationInitialAsk: PromiseOrValue<BigNumberish>
  }

  export type DetailsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maxAmount: BigNumber
    rate: BigNumber
    duration: BigNumber
    maxPotentialDebt: BigNumber
    liquidationInitialAsk: BigNumber
  }

  export type LienStruct = {
    token: PromiseOrValue<string>
    vault: PromiseOrValue<string>
    strategyRoot: PromiseOrValue<BytesLike>
    collateralId: PromiseOrValue<BigNumberish>
    details: ILienToken.DetailsStruct
  }

  export type LienStructOutput = [
    string,
    string,
    string,
    BigNumber,
    ILienToken.DetailsStructOutput
  ] & {
    token: string
    vault: string
    strategyRoot: string
    collateralId: BigNumber
    details: ILienToken.DetailsStructOutput
  }

  export type PointStruct = {
    amount: PromiseOrValue<BigNumberish>
    position: PromiseOrValue<BigNumberish>
    last: PromiseOrValue<BigNumberish>
    end: PromiseOrValue<BigNumberish>
    lienId: PromiseOrValue<BigNumberish>
  }

  export type PointStructOutput = [
    BigNumber,
    number,
    number,
    number,
    BigNumber
  ] & {
    amount: BigNumber
    position: number
    last: number
    end: number
    lienId: BigNumber
  }

  export type StackStruct = {
    lien: ILienToken.LienStruct
    point: ILienToken.PointStruct
  }

  export type StackStructOutput = [
    ILienToken.LienStructOutput,
    ILienToken.PointStructOutput
  ] & {
    lien: ILienToken.LienStructOutput
    point: ILienToken.PointStructOutput
  }

  export type LienActionEncumberStruct = {
    collateralId: PromiseOrValue<BigNumberish>
    amount: PromiseOrValue<BigNumberish>
    receiver: PromiseOrValue<string>
    lien: ILienToken.LienStruct
    stack: ILienToken.StackStruct[]
  }

  export type LienActionEncumberStructOutput = [
    BigNumber,
    BigNumber,
    string,
    ILienToken.LienStructOutput,
    ILienToken.StackStructOutput[]
  ] & {
    collateralId: BigNumber
    amount: BigNumber
    receiver: string
    lien: ILienToken.LienStructOutput
    stack: ILienToken.StackStructOutput[]
  }

  export type LienActionBuyoutStruct = {
    incoming: IAstariaRouter.CommitmentStruct
    position: PromiseOrValue<BigNumberish>
    encumber: ILienToken.LienActionEncumberStruct
  }

  export type LienActionBuyoutStructOutput = [
    IAstariaRouter.CommitmentStructOutput,
    number,
    ILienToken.LienActionEncumberStructOutput
  ] & {
    incoming: IAstariaRouter.CommitmentStructOutput
    position: number
    encumber: ILienToken.LienActionEncumberStructOutput
  }

  export type FileStruct = {
    what: PromiseOrValue<BigNumberish>
    data: PromiseOrValue<BytesLike>
  }

  export type FileStructOutput = [number, string] & {
    what: number
    data: string
  }

  export type AuctionStackStruct = {
    lienId: PromiseOrValue<BigNumberish>
    amountOwed: PromiseOrValue<BigNumberish>
    end: PromiseOrValue<BigNumberish>
  }

  export type AuctionStackStructOutput = [BigNumber, BigNumber, number] & {
    lienId: BigNumber
    amountOwed: BigNumber
    end: number
  }

  export type AuctionDataStruct = {
    liquidator: PromiseOrValue<string>
    stack: ILienToken.AuctionStackStruct[]
  }

  export type AuctionDataStructOutput = [
    string,
    ILienToken.AuctionStackStructOutput[]
  ] & { liquidator: string; stack: ILienToken.AuctionStackStructOutput[] }
}

export declare namespace IAstariaRouter {
  export type StrategyDetailsStruct = {
    version: PromiseOrValue<BigNumberish>
    deadline: PromiseOrValue<BigNumberish>
    vault: PromiseOrValue<string>
  }

  export type StrategyDetailsStructOutput = [number, BigNumber, string] & {
    version: number
    deadline: BigNumber
    vault: string
  }

  export type MerkleDataStruct = {
    root: PromiseOrValue<BytesLike>
    proof: PromiseOrValue<BytesLike>[]
  }

  export type MerkleDataStructOutput = [string, string[]] & {
    root: string
    proof: string[]
  }

  export type NewLienRequestStruct = {
    strategy: IAstariaRouter.StrategyDetailsStruct
    stack: ILienToken.StackStruct[]
    nlrDetails: PromiseOrValue<BytesLike>
    merkle: IAstariaRouter.MerkleDataStruct
    amount: PromiseOrValue<BigNumberish>
    v: PromiseOrValue<BigNumberish>
    r: PromiseOrValue<BytesLike>
    s: PromiseOrValue<BytesLike>
  }

  export type NewLienRequestStructOutput = [
    IAstariaRouter.StrategyDetailsStructOutput,
    ILienToken.StackStructOutput[],
    string,
    IAstariaRouter.MerkleDataStructOutput,
    BigNumber,
    number,
    string,
    string
  ] & {
    strategy: IAstariaRouter.StrategyDetailsStructOutput
    stack: ILienToken.StackStructOutput[]
    nlrDetails: string
    merkle: IAstariaRouter.MerkleDataStructOutput
    amount: BigNumber
    v: number
    r: string
    s: string
  }

  export type CommitmentStruct = {
    tokenContract: PromiseOrValue<string>
    tokenId: PromiseOrValue<BigNumberish>
    lienRequest: IAstariaRouter.NewLienRequestStruct
  }

  export type CommitmentStructOutput = [
    string,
    BigNumber,
    IAstariaRouter.NewLienRequestStructOutput
  ] & {
    tokenContract: string
    tokenId: BigNumber
    lienRequest: IAstariaRouter.NewLienRequestStructOutput
  }
}

export interface LienTokenInterface extends utils.Interface {
  functions: {
    'ASTARIA_ROUTER()': FunctionFragment
    'COLLATERAL_TOKEN()': FunctionFragment
    '_getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[])': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'authority()': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'buyoutLien(((address,uint256,((uint8,uint256,address),((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],bytes,(bytes32,bytes32[]),uint256,uint8,bytes32,bytes32)),uint8,(uint256,uint256,address,(address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[])))': FunctionFragment
    'calculateSlope(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))': FunctionFragment
    'createLien((uint256,uint256,address,(address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[]))': FunctionFragment
    'file((uint8,bytes))': FunctionFragment
    'getAmountOwingAtLiquidation(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))': FunctionFragment
    'getApproved(uint256)': FunctionFragment
    'getAuctionData(uint256)': FunctionFragment
    'getBuyout(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))': FunctionFragment
    'getCollateralState(uint256)': FunctionFragment
    'getInterest(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))': FunctionFragment
    'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[])': FunctionFragment
    'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)': FunctionFragment
    'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))': FunctionFragment
    'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)),uint256)': FunctionFragment
    'getPayee(uint256)': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)': FunctionFragment
    'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint8,uint256)': FunctionFragment
    'owner()': FunctionFragment
    'ownerOf(uint256)': FunctionFragment
    'payDebtViaClearingHouse(uint256,uint256)': FunctionFragment
    'safeTransferFrom(address,address,uint256)': FunctionFragment
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'setAuthority(address)': FunctionFragment
    'setPayee((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),address)': FunctionFragment
    'stopLiens(uint256,uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],address)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'tokenURI(uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'validateLien((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)))': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'ASTARIA_ROUTER'
      | 'COLLATERAL_TOKEN'
      | '_getMaxPotentialDebtForCollateral'
      | 'approve'
      | 'authority'
      | 'balanceOf'
      | 'buyoutLien'
      | 'calculateSlope'
      | 'createLien'
      | 'file'
      | 'getAmountOwingAtLiquidation'
      | 'getApproved'
      | 'getAuctionData'
      | 'getBuyout'
      | 'getCollateralState'
      | 'getInterest'
      | 'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[])'
      | 'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'
      | 'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))'
      | 'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)),uint256)'
      | 'getPayee'
      | 'isApprovedForAll'
      | 'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'
      | 'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint8,uint256)'
      | 'owner'
      | 'ownerOf'
      | 'payDebtViaClearingHouse'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setAuthority'
      | 'setPayee'
      | 'stopLiens'
      | 'supportsInterface'
      | 'tokenURI'
      | 'transferFrom'
      | 'transferOwnership'
      | 'validateLien'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'ASTARIA_ROUTER',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'COLLATERAL_TOKEN',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: '_getMaxPotentialDebtForCollateral',
    values: [ILienToken.StackStruct[]]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'authority', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'buyoutLien',
    values: [ILienToken.LienActionBuyoutStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateSlope',
    values: [ILienToken.StackStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'createLien',
    values: [ILienToken.LienActionEncumberStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'file',
    values: [ILienToken.FileStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountOwingAtLiquidation',
    values: [ILienToken.StackStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'getApproved',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getAuctionData',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getBuyout',
    values: [ILienToken.StackStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'getCollateralState',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getInterest',
    values: [ILienToken.StackStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[])',
    values: [ILienToken.StackStruct[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)',
    values: [ILienToken.StackStruct[], PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))',
    values: [ILienToken.StackStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)),uint256)',
    values: [ILienToken.StackStruct, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getPayee',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)',
    values: [
      PromiseOrValue<BigNumberish>,
      ILienToken.StackStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint8,uint256)',
    values: [
      PromiseOrValue<BigNumberish>,
      ILienToken.StackStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'payDebtViaClearingHouse',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(
    functionFragment: 'setAuthority',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'setPayee',
    values: [ILienToken.LienStruct, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'stopLiens',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ILienToken.StackStruct[],
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'tokenURI',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'validateLien',
    values: [ILienToken.LienStruct]
  ): string

  decodeFunctionResult(
    functionFragment: 'ASTARIA_ROUTER',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'COLLATERAL_TOKEN',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: '_getMaxPotentialDebtForCollateral',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'authority', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buyoutLien', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'calculateSlope',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'createLien', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'file', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAmountOwingAtLiquidation',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAuctionData',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getBuyout', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getCollateralState',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getInterest', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[])',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)),uint256)',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getPayee', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint8,uint256)',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'payDebtViaClearingHouse',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setAuthority',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setPayee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stopLiens', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'validateLien',
    data: BytesLike
  ): Result

  events: {
    'AddLien(uint256,uint8,uint256,tuple)': EventFragment
    'Approval(address,address,uint256)': EventFragment
    'ApprovalForAll(address,address,bool)': EventFragment
    'AuthorityUpdated(address,address)': EventFragment
    'BuyoutLien(address,uint256,uint256)': EventFragment
    'FileUpdated(uint8,bytes)': EventFragment
    'LienStackUpdated(uint256,uint8,uint8,uint8)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'PayeeChanged(uint256,address)': EventFragment
    'Payment(uint256,uint256)': EventFragment
    'RemovedLiens(uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AddLien'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AuthorityUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BuyoutLien'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FileUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LienStackUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PayeeChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Payment'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RemovedLiens'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export interface AddLienEventObject {
  collateralId: BigNumber
  position: number
  lienId: BigNumber
  stack: ILienToken.StackStructOutput
}
export type AddLienEvent = TypedEvent<
  [BigNumber, number, BigNumber, ILienToken.StackStructOutput],
  AddLienEventObject
>

export type AddLienEventFilter = TypedEventFilter<AddLienEvent>

export interface ApprovalEventObject {
  owner: string
  spender: string
  id: BigNumber
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface ApprovalForAllEventObject {
  owner: string
  operator: string
  approved: boolean
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export interface AuthorityUpdatedEventObject {
  user: string
  newAuthority: string
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string, string],
  AuthorityUpdatedEventObject
>

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>

export interface BuyoutLienEventObject {
  buyer: string
  lienId: BigNumber
  buyout: BigNumber
}
export type BuyoutLienEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BuyoutLienEventObject
>

export type BuyoutLienEventFilter = TypedEventFilter<BuyoutLienEvent>

export interface FileUpdatedEventObject {
  what: number
  data: string
}
export type FileUpdatedEvent = TypedEvent<
  [number, string],
  FileUpdatedEventObject
>

export type FileUpdatedEventFilter = TypedEventFilter<FileUpdatedEvent>

export interface LienStackUpdatedEventObject {
  collateralId: BigNumber
  position: number
  action: number
  stackLength: number
}
export type LienStackUpdatedEvent = TypedEvent<
  [BigNumber, number, number, number],
  LienStackUpdatedEventObject
>

export type LienStackUpdatedEventFilter =
  TypedEventFilter<LienStackUpdatedEvent>

export interface OwnershipTransferredEventObject {
  user: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface PayeeChangedEventObject {
  lienId: BigNumber
  payee: string
}
export type PayeeChangedEvent = TypedEvent<
  [BigNumber, string],
  PayeeChangedEventObject
>

export type PayeeChangedEventFilter = TypedEventFilter<PayeeChangedEvent>

export interface PaymentEventObject {
  lienId: BigNumber
  amount: BigNumber
}
export type PaymentEvent = TypedEvent<
  [BigNumber, BigNumber],
  PaymentEventObject
>

export type PaymentEventFilter = TypedEventFilter<PaymentEvent>

export interface RemovedLiensEventObject {
  collateralId: BigNumber
}
export type RemovedLiensEvent = TypedEvent<[BigNumber], RemovedLiensEventObject>

export type RemovedLiensEventFilter = TypedEventFilter<RemovedLiensEvent>

export interface TransferEventObject {
  from: string
  to: string
  id: BigNumber
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface LienToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: LienTokenInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    ASTARIA_ROUTER(overrides?: CallOverrides): Promise<[string]>

    COLLATERAL_TOKEN(overrides?: CallOverrides): Promise<[string]>

    _getMaxPotentialDebtForCollateral(
      stack: ILienToken.StackStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxPotentialDebt: BigNumber }>

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    authority(overrides?: CallOverrides): Promise<[string]>

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    buyoutLien(
      params: ILienToken.LienActionBuyoutStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    calculateSlope(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    createLien(
      params: ILienToken.LienActionEncumberStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    file(
      incoming: ILienToken.FileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getAmountOwingAtLiquidation(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    getAuctionData(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILienToken.AuctionDataStructOutput]>

    getBuyout(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    getCollateralState(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    getInterest(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[])'(
      stack: ILienToken.StackStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxPotentialDebt: BigNumber }>

    'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'(
      stack: ILienToken.StackStruct[],
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxPotentialDebt: BigNumber }>

    'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))'(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)),uint256)'(
      stack: ILienToken.StackStruct,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getPayee(
      lienId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'(
      collateralId: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint8,uint256)'(
      collateralId: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      position: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>

    payDebtViaClearingHouse(
      collateralId: PromiseOrValue<BigNumberish>,
      payment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPayee(
      lien: ILienToken.LienStruct,
      newPayee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    stopLiens(
      collateralId: PromiseOrValue<BigNumberish>,
      auctionWindow: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    validateLien(
      lien: ILienToken.LienStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lienId: BigNumber }>
  }

  ASTARIA_ROUTER(overrides?: CallOverrides): Promise<string>

  COLLATERAL_TOKEN(overrides?: CallOverrides): Promise<string>

  _getMaxPotentialDebtForCollateral(
    stack: ILienToken.StackStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  authority(overrides?: CallOverrides): Promise<string>

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  buyoutLien(
    params: ILienToken.LienActionBuyoutStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  calculateSlope(
    stack: ILienToken.StackStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  createLien(
    params: ILienToken.LienActionEncumberStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  file(
    incoming: ILienToken.FileStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getAmountOwingAtLiquidation(
    stack: ILienToken.StackStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  getAuctionData(
    collateralId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILienToken.AuctionDataStructOutput>

  getBuyout(
    stack: ILienToken.StackStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>

  getCollateralState(
    collateralId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  getInterest(
    stack: ILienToken.StackStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[])'(
    stack: ILienToken.StackStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'(
    stack: ILienToken.StackStruct[],
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))'(
    stack: ILienToken.StackStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)),uint256)'(
    stack: ILienToken.StackStruct,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getPayee(
    lienId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'(
    collateralId: PromiseOrValue<BigNumberish>,
    stack: ILienToken.StackStruct[],
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint8,uint256)'(
    collateralId: PromiseOrValue<BigNumberish>,
    stack: ILienToken.StackStruct[],
    position: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  ownerOf(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  payDebtViaClearingHouse(
    collateralId: PromiseOrValue<BigNumberish>,
    payment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setAuthority(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setPayee(
    lien: ILienToken.LienStruct,
    newPayee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  stopLiens(
    collateralId: PromiseOrValue<BigNumberish>,
    auctionWindow: PromiseOrValue<BigNumberish>,
    stack: ILienToken.StackStruct[],
    liquidator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  validateLien(
    lien: ILienToken.LienStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  callStatic: {
    ASTARIA_ROUTER(overrides?: CallOverrides): Promise<string>

    COLLATERAL_TOKEN(overrides?: CallOverrides): Promise<string>

    _getMaxPotentialDebtForCollateral(
      stack: ILienToken.StackStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    authority(overrides?: CallOverrides): Promise<string>

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    buyoutLien(
      params: ILienToken.LienActionBuyoutStruct,
      overrides?: CallOverrides
    ): Promise<
      [ILienToken.StackStructOutput[], ILienToken.StackStructOutput] & {
        newStack: ILienToken.StackStructOutput
      }
    >

    calculateSlope(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    createLien(
      params: ILienToken.LienActionEncumberStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, ILienToken.StackStructOutput[], BigNumber] & {
        lienId: BigNumber
        newStack: ILienToken.StackStructOutput[]
        lienSlope: BigNumber
      }
    >

    file(
      incoming: ILienToken.FileStruct,
      overrides?: CallOverrides
    ): Promise<void>

    getAmountOwingAtLiquidation(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    getAuctionData(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILienToken.AuctionDataStructOutput>

    getBuyout(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    getCollateralState(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    getInterest(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[])'(
      stack: ILienToken.StackStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'(
      stack: ILienToken.StackStruct[],
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))'(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)),uint256)'(
      stack: ILienToken.StackStruct,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPayee(
      lienId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'(
      collateralId: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILienToken.StackStructOutput[]>

    'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint8,uint256)'(
      collateralId: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      position: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILienToken.StackStructOutput[]>

    owner(overrides?: CallOverrides): Promise<string>

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    payDebtViaClearingHouse(
      collateralId: PromiseOrValue<BigNumberish>,
      payment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    setPayee(
      lien: ILienToken.LienStruct,
      newPayee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    stopLiens(
      collateralId: PromiseOrValue<BigNumberish>,
      auctionWindow: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      liquidator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    validateLien(
      lien: ILienToken.LienStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {
    'AddLien(uint256,uint8,uint256,tuple)'(
      collateralId?: PromiseOrValue<BigNumberish> | null,
      position?: null,
      lienId?: PromiseOrValue<BigNumberish> | null,
      stack?: null
    ): AddLienEventFilter
    AddLien(
      collateralId?: PromiseOrValue<BigNumberish> | null,
      position?: null,
      lienId?: PromiseOrValue<BigNumberish> | null,
      stack?: null
    ): AddLienEventFilter

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter

    'ApprovalForAll(address,address,bool)'(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter

    'AuthorityUpdated(address,address)'(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null
    ): AuthorityUpdatedEventFilter
    AuthorityUpdated(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null
    ): AuthorityUpdatedEventFilter

    'BuyoutLien(address,uint256,uint256)'(
      buyer?: PromiseOrValue<string> | null,
      lienId?: null,
      buyout?: null
    ): BuyoutLienEventFilter
    BuyoutLien(
      buyer?: PromiseOrValue<string> | null,
      lienId?: null,
      buyout?: null
    ): BuyoutLienEventFilter

    'FileUpdated(uint8,bytes)'(what?: null, data?: null): FileUpdatedEventFilter
    FileUpdated(what?: null, data?: null): FileUpdatedEventFilter

    'LienStackUpdated(uint256,uint8,uint8,uint8)'(
      collateralId?: PromiseOrValue<BigNumberish> | null,
      position?: null,
      action?: null,
      stackLength?: null
    ): LienStackUpdatedEventFilter
    LienStackUpdated(
      collateralId?: PromiseOrValue<BigNumberish> | null,
      position?: null,
      action?: null,
      stackLength?: null
    ): LienStackUpdatedEventFilter

    'OwnershipTransferred(address,address)'(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'PayeeChanged(uint256,address)'(
      lienId?: PromiseOrValue<BigNumberish> | null,
      payee?: PromiseOrValue<string> | null
    ): PayeeChangedEventFilter
    PayeeChanged(
      lienId?: PromiseOrValue<BigNumberish> | null,
      payee?: PromiseOrValue<string> | null
    ): PayeeChangedEventFilter

    'Payment(uint256,uint256)'(
      lienId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): PaymentEventFilter
    Payment(
      lienId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): PaymentEventFilter

    'RemovedLiens(uint256)'(
      collateralId?: PromiseOrValue<BigNumberish> | null
    ): RemovedLiensEventFilter
    RemovedLiens(
      collateralId?: PromiseOrValue<BigNumberish> | null
    ): RemovedLiensEventFilter

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter
  }

  estimateGas: {
    ASTARIA_ROUTER(overrides?: CallOverrides): Promise<BigNumber>

    COLLATERAL_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    _getMaxPotentialDebtForCollateral(
      stack: ILienToken.StackStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    authority(overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    buyoutLien(
      params: ILienToken.LienActionBuyoutStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    calculateSlope(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    createLien(
      params: ILienToken.LienActionEncumberStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    file(
      incoming: ILienToken.FileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getAmountOwingAtLiquidation(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAuctionData(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getBuyout(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCollateralState(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getInterest(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[])'(
      stack: ILienToken.StackStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'(
      stack: ILienToken.StackStruct[],
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))'(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)),uint256)'(
      stack: ILienToken.StackStruct,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPayee(
      lienId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'(
      collateralId: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint8,uint256)'(
      collateralId: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      position: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    payDebtViaClearingHouse(
      collateralId: PromiseOrValue<BigNumberish>,
      payment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setPayee(
      lien: ILienToken.LienStruct,
      newPayee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    stopLiens(
      collateralId: PromiseOrValue<BigNumberish>,
      auctionWindow: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    validateLien(
      lien: ILienToken.LienStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    ASTARIA_ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>

    COLLATERAL_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    _getMaxPotentialDebtForCollateral(
      stack: ILienToken.StackStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    buyoutLien(
      params: ILienToken.LienActionBuyoutStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    calculateSlope(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    createLien(
      params: ILienToken.LienActionEncumberStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    file(
      incoming: ILienToken.FileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getAmountOwingAtLiquidation(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAuctionData(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBuyout(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCollateralState(
      collateralId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getInterest(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[])'(
      stack: ILienToken.StackStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getMaxPotentialDebtForCollateral(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'(
      stack: ILienToken.StackStruct[],
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)))'(
      stack: ILienToken.StackStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getOwed(((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256)),uint256)'(
      stack: ILienToken.StackStruct,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPayee(
      lienId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint256)'(
      collateralId: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    'makePayment(uint256,((address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256)),(uint88,uint8,uint40,uint40,uint256))[],uint8,uint256)'(
      collateralId: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      position: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    payDebtViaClearingHouse(
      collateralId: PromiseOrValue<BigNumberish>,
      payment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setPayee(
      lien: ILienToken.LienStruct,
      newPayee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    stopLiens(
      collateralId: PromiseOrValue<BigNumberish>,
      auctionWindow: PromiseOrValue<BigNumberish>,
      stack: ILienToken.StackStruct[],
      liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    validateLien(
      lien: ILienToken.LienStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
